this is the cognitive journal = "use client"

import React, { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Brain, ChevronLeft, ChevronRight, Sun, Cloud, CloudRain, Zap, Plus, Check } from 'lucide-react'
import { Area, AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceDot } from 'recharts'

interface CognitiveEntry {
  id: string
  timestamp: Date
  emotion: string
  intensity: number
  thoughtPattern: string
  realityCheck: string
  situation: string
  automaticThoughts: string
  evidence: string
  alternativeThoughts: string
  actionPlan: string
  processingStage: 'initial' | 'analyzed' | 'reframed'
}

const THOUGHT_PATTERNS = {
  'catastrophizing': { icon: CloudRain, label: 'Stormy Thoughts', color: '#4A5568' },
  'blackAndWhite': { icon: Sun, label: 'All-or-Nothing', color: '#F6E05E' },
  'overgeneralization': { icon: Cloud, label: 'Clouded Judgment', color: '#718096' },
  'mindReading': { icon: Zap, label: 'Lightning Conclusions', color: '#9F7AEA' },
  'emotionalReasoning': { icon: CloudRain, label: 'Emotional Downpour', color: '#FC8181' },
  'shouldStatements': { icon: Cloud, label: 'Pressure Front', color: '#4FD1C5' },
  'personalization': { icon: Sun, label: 'Self-Centered Forecast', color: '#F6AD55' },
  'filteringPositives': { icon: Cloud, label: 'Overcast Positivity', color: '#9F7AEA' }
}

const EMOTIONS = ['😊', '😢', '😠', '😍', '🤔', '😎', '🙃', '😴', '🥳', '😱', '😡', '😌', '🥺', '😤', '😇', '🤯', '😰', '🤗', '😑', '🙄']

export default function Component() {
  const [entries, setEntries] = useState<CognitiveEntry[]>([])
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [viewMode, setViewMode] = useState<'day' | 'week'>('week')
  const [selectedEntry, setSelectedEntry] = useState<CognitiveEntry | null>(null)
  const [isAddingEntry, setIsAddingEntry] = useState(false)
  const [newEntry, setNewEntry] = useState<Partial<CognitiveEntry>>({
    emotion: '😊',
    intensity: 50,
    thoughtPattern: 'catastrophizing',
    processingStage: 'initial'
  })

  useEffect(() => {
    // Generate sample data
    const sampleData: CognitiveEntry[] = Array.from({ length: 24 }, (_, i) => ({
      id: `entry-${i}`,
      timestamp: new Date(Date.now() - i * 3600000),
      emotion: EMOTIONS[Math.floor(Math.random() * EMOTIONS.length)],
      intensity: Math.random() * 100,
      thoughtPattern: Object.keys(THOUGHT_PATTERNS)[Math.floor(Math.random() * Object.keys(THOUGHT_PATTERNS).length)],
      realityCheck: 'Sample reality check',
      situation: 'Sample situation',
      automaticThoughts: 'Sample automatic thoughts',
      evidence: 'Sample evidence',
      alternativeThoughts: 'Sample alternative thoughts',
      actionPlan: 'Sample action plan',
      processingStage: ['initial', 'analyzed', 'reframed'][Math.floor(Math.random() * 3)] as 'initial' | 'analyzed' | 'reframed'
    }))
    setEntries(sampleData)
  }, [])

  const getDateRange = () => {
    const start = new Date(selectedDate)
    const end = new Date(selectedDate)
    
    if (viewMode === 'week') {
      start.setDate(start.getDate() - 7)
    } else {
      start.setHours(0, 0, 0)
      end.setHours(23, 59, 59)
    }
    
    return `${start.toLocaleDateString()} - ${end.toLocaleDateString()}`
  }

  const getChartData = () => {
    return entries.map(entry => ({
      time: entry.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      intensity: entry.intensity,
      emotion: entry.emotion,
      id: entry.id,
      processingStage: entry.processingStage
    }))
  }

  const handleAddEntry = () => {
    const fullEntry: CognitiveEntry = {
      ...newEntry as CognitiveEntry,
      id: `entry-${Date.now()}`,
      timestamp: new Date(),
      realityCheck: newEntry.realityCheck || '',
      situation: newEntry.situation || '',
      automaticThoughts: newEntry.automaticThoughts || '',
      evidence: newEntry.evidence || '',
      alternativeThoughts: newEntry.alternativeThoughts || '',
      actionPlan: newEntry.actionPlan || ''
    }
    setEntries([fullEntry, ...entries])
    setIsAddingEntry(false)
    setNewEntry({
      emotion: '😊',
      intensity: 50,
      thoughtPattern: 'catastrophizing',
      processingStage: 'initial'
    })
  }

  const updateEntryStage = (entryId: string, newStage: 'initial' | 'analyzed' | 'reframed') => {
    setEntries(entries.map(entry => 
      entry.id === entryId ? { ...entry, processingStage: newStage } : entry
    ))
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-blue-800 p-6">
      <Card className="bg-gray-800/50 backdrop-blur border-none">
        <CardHeader className="border-b border-gray-700">
          <div className="flex items-center justify-between">
            <CardTitle className="text-2xl font-bold text-white">Cognitive Weather Report</CardTitle>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="icon"
                onClick={() => {
                  const newDate = new Date(selectedDate)
                  newDate.setDate(newDate.getDate() - (viewMode === 'week' ? 7 : 1))
                  setSelectedDate(newDate)
                }}
                className="text-white hover:bg-gray-700"
              >
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <span className="text-white bg-gray-700/50 px-4 py-2 rounded-full text-sm">
                {getDateRange()}
              </span>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => {
                  const newDate = new Date(selectedDate)
                  newDate.setDate(newDate.getDate() + (viewMode === 'week' ? 7 : 1))
                  setSelectedDate(newDate)
                }}
                className="text-white hover:bg-gray-700"
              >
                <ChevronRight className="h-4 w-4" />
              </Button>
              <Tabs value={viewMode} onValueChange={(value: 'day' | 'week') => setViewMode(value)}>
                <TabsList className="bg-gray-700/50">
                  <TabsTrigger value="day" className="text-white data-[state=active]:bg-blue-600">
                    Day
                  </TabsTrigger>
                  <TabsTrigger value="week" className="text-white data-[state=active]:bg-blue-600">
                    Week
                  </TabsTrigger>
                </TabsList>
              </Tabs>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-6">
          <div className="grid gap-6">
            {/* Main Chart with Emoji Navigation */}
            <Card className="bg-gray-800/50 border-none p-4">
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={getChartData()} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
                    <defs>
                      <linearGradient id="colorIntensity" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8}/>
                        <stop offset="95%" stopColor="#3B82F6" stopOpacity={0}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                    <XAxis 
                      dataKey="time" 
                      stroke="#9CA3AF"
                      tick={{ fill: '#9CA3AF' }}
                    />
                    <YAxis 
                      stroke="#9CA3AF"
                      tick={{ fill: '#9CA3AF' }}
                    />
                    <Tooltip
                      content={({ active, payload }) => {
                        if (active && payload && payload.length) {
                          return (
                            <div className="bg-gray-800 p-2 rounded-lg border border-gray-700">
                              <p className="text-white">{`Time: ${payload[0].payload.time}`}</p>
                              <p className="text-white">{`Intensity: ${payload[0].value}`}</p>
                              <p className="text-2xl">{payload[0].payload.emotion}</p>
                              <p className="text-white">{`Stage: ${payload[0].payload.processingStage}`}</p>
                            </div>
                          )
                        }
                        return null
                      }}
                    />
                    <Area
                      type="monotone"
                      dataKey="intensity"
                      stroke="#3B82F6"
                      fillOpacity={1}
                      fill="url(#colorIntensity)"
                    />
                    {entries.map((entry, index) => (
                      <ReferenceDot
                        key={index}
                        x={entry.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        y={entry.intensity}
                        r={20}
                        fill="transparent"
                        stroke="none"
                      >
                        <text
                          x={entry.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                          y={entry.intensity}
                          dy={-10}
                          textAnchor="middle"
                          fill="#FFFFFF"
                          fontSize="20"
                          style={{ cursor: 'pointer' }}
                          onClick={() => setSelectedEntry(entry)}
                        >
                          {entry.emotion}
                        </text>
                      </ReferenceDot>
                    ))}
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </Card>

            {/* Thought Patterns */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {Object.entries(THOUGHT_PATTERNS).map(([key, { icon: Icon, label, color }]) => {
                const count = entries.filter(e => e.thoughtPattern === key).length
                return (
                  <Card key={key} className="bg-gray-800/50 border-none">
                    <CardContent className="p-4">
                      <div className="flex items-center gap-2">
                        <Icon className="h-5 w-5" style={{ color }} />
                        <div>
                          <p className="text-sm text-gray-400">{label}</p>
                          <p className="text-xl text-white font-bold">{count}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>

            {/* Selected Entry Details or Add New Entry Form */}
            <Card className="bg-gray-800/50 border-none">
              <CardHeader>
                <CardTitle className="text-white flex justify-between items-center">
                  {isAddingEntry ? 'Add New Entry' : 'Thought Analysis'}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setIsAddingEntry(!isAddingEntry)}
                    className="text-white hover:bg-blue-700"
                  >
                    {isAddingEntry ? <Check className="h-4 w-4" /> : <Plus className="h-4 w-4" />}
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {isAddingEntry ? (
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="text-sm text-gray-400">Emotion</label>
                        <div className="grid grid-cols-5 gap-2 mt-2">
                          {EMOTIONS.map((emoji) => (
                            <Button
                              key={emoji}
                              variant="ghost"
                              className={`text-2xl p-2 ${newEntry.emotion === emoji ? 'bg-blue-500/20' : ''}`}
                              onClick={() => setNewEntry({ ...newEntry, emotion: emoji })}
                            >
                              {emoji}
                            </Button>
                          ))}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Intensity</label>
                        <Slider
                          value={[newEntry.intensity || 50]}
                          onValueChange={(value) => setNewEntry({ ...newEntry, intensity: value[0] })}
                          max={100}
                          step={1}
                          className="mt-2"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Thought Pattern</label>
                      <Select
                        value={newEntry.thoughtPattern}
                        onValueChange={(value) => setNewEntry({ ...newEntry, thoughtPattern: value })}
                      >
                        <SelectTrigger className="w-full mt-2 bg-gray-700 border-gray-600 text-white">
                          <SelectValue placeholder="Select a thought pattern" />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(THOUGHT_PATTERNS).map(([key, { label }]) => (
                            <SelectItem key={key} value={key}>{label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Situation</label>
                      <Textarea
                        placeholder="Describe the situation..."
                        className="mt-2 bg-gray-700 border-gray-600 text-white"
                        value={newEntry.situation || ''}
                        onChange={(e) => setNewEntry({ ...newEntry, situation: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Automatic Thoughts</label>
                      <Textarea
                        placeholder="What thoughts came to mind?"
                        className="mt-2 bg-gray-700 border-gray-600 text-white"
                        value={newEntry.automaticThoughts || ''}
                        onChange={(e) => setNewEntry({ ...newEntry, automaticThoughts: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Evidence</label>
                      <Textarea
                        placeholder="What evidence supports or contradicts these thoughts?"
                        className="mt-2 bg-gray-700 border-gray-600 text-white"
                        value={newEntry.evidence || ''}
                        onChange={(e) => setNewEntry({ ...newEntry, evidence: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Alternative Thoughts</label>
                      <Textarea
                        placeholder="What are some alternative perspectives?"
                        className="mt-2 bg-gray-700 border-gray-600 text-white"
                        value={newEntry.alternativeThoughts || ''}
                        onChange={(e) => setNewEntry({ ...newEntry, alternativeThoughts: e.target.value })}
                      />
                    </div>
                    <div>
                      <label className="text-sm text-gray-400">Action Plan</label>
                      <Textarea
                        placeholder="What actions can you take based on this analysis?"
                        className="mt-2 bg-gray-700 border-gray-600 text-white"
                        value={newEntry.actionPlan || ''}
                        onChange={(e) => setNewEntry({ ...newEntry, actionPlan: e.target.value })}
                      />
                    </div>
                    <Button onClick={handleAddEntry} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
                      Add Entry
                    </Button>
                  </div>
                ) : selectedEntry ? (
                  <div className="space-y-4">
                    <div className="flex items-center gap-4">
                      <span className="text-3xl">{selectedEntry.emotion}</span>
                      <div>
                        <p className="text-gray-400">Intensity</p>
                        <p className="text-white text-xl">{Math.round(selectedEntry.intensity)}%</p>
                      </div>
                    </div>
                    <div>
                      <p className="text-gray-400">Thought Pattern</p>
                      <p className="text-white">{THOUGHT_PATTERNS[selectedEntry.thoughtPattern as keyof typeof THOUGHT_PATTERNS].label}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Situation</p>
                      <p className="text-white">{selectedEntry.situation}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Automatic Thoughts</p>
                      <p className="text-white">{selectedEntry.automaticThoughts}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Evidence</p>
                      <p className="text-white">{selectedEntry.evidence}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Alternative Thoughts</p>
                      <p className="text-white">{selectedEntry.alternativeThoughts}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Action Plan</p>
                      <p className="text-white">{selectedEntry.actionPlan}</p>
                    </div>
                    <div>
                      <p className="text-gray-400">Processing Stage</p>
                      <Select
                        value={selectedEntry.processingStage}
                        onValueChange={(value: 'initial' | 'analyzed' | 'reframed') => updateEntryStage(selectedEntry.id, value)}
                      >
                        <SelectTrigger className="w-full mt-2 bg-gray-700 border-gray-600 text-white">
                          <SelectValue placeholder="Select processing stage" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="initial">Initial</SelectItem>
                          <SelectItem value="analyzed">Analyzed</SelectItem>
                          <SelectItem value="reframed">Reframed</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                ) : (
                  <p className="text-center text-gray-400">Select an entry from the chart or add a new one to begin analysis.</p>
                )}
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

Certainly! Let's enhance your `EnhancedCognitiveJournal` component to incorporate **CBT (Cognitive Behavioral Therapy)** principles, providing a structured interface for users to document their feelings and classify their emotional expressions cognitively. We'll integrate **five key CBT components**—**Situation**, **Thoughts**, **Emotions**, **Physical Reactions**, and **Behaviors**—as **"workers"** within the journaling process. These workers will guide users through a structured journaling process, facilitating deeper self-reflection and cognitive understanding.

### **Overview of Enhancements**

1. **Structured Journaling Interface**: Implement a step-by-step form using tabs to guide users through documenting their experiences based on the five CBT components.
2. **Tagging System**: Enhance the tagging mechanism to align with CBT themes, allowing users to classify and analyze their emotional expressions effectively.
3. **Visualization and Analysis**: Maintain and improve the existing analysis features to provide insights based on the structured entries.
4. **User Experience Improvements**: Add animations and visual cues to make the journaling process engaging and intuitive.

### **1. Integrate CBT Components as Tabs**

We'll use the `Tabs` component to create separate sections for each CBT component. This approach provides a guided, step-by-step journaling process, ensuring users cover all necessary aspects.

### **2. Update the `JournalEntry` Interface**

Extend the `JournalEntry` interface to include fields for each CBT component.

```typescript
interface JournalEntry {
  id: string
  timestamp: string
  situation: string
  thoughts: string
  emotions: string
  physicalReactions: string
  behaviors: string
  tags: string[]
}
```

### **3. Modify the Component State**

Update the `currentEntry` state to reflect the new structure.

```javascript
const [currentEntry, setCurrentEntry] = useState<JournalEntry>({
  id: '',
  timestamp: new Date().toISOString(),
  situation: '',
  thoughts: '',
  emotions: '',
  physicalReactions: '',
  behaviors: '',
  tags: [],
})
```

### **4. Implement the CBT-Guided Form**

We'll create tabs for each CBT component, prompting the user to input relevant information. Each tab represents a "worker" guiding the user through documenting different aspects of their experience.

```jsx
'use client'

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Brain, Activity, Eye, Ear, Tag, Plus, Sparkles } from 'lucide-react'
import { Textarea } from "@/components/ui/textarea"
import { Radar } from 'react-chartjs-2'
import { Chart, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js'

Chart.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend)

// Worker script as a string
const workerScript = `
  self.onmessage = function (e) {
    const { action, data } = e.data;
    switch (action) {
      case 'ANALYZE_ENTRIES':
        const result = analyzeEntries(data);
        self.postMessage({ action: 'ANALYSIS_COMPLETE', result });
        break;
      default:
        break;
    }
  };

  function analyzeEntries(entries) {
    const subsystems = {
      'Object Subsystem': 0,
      'Acoustic Subsystem': 0,
      'Visual Subsystem': 0,
      'Morphophonolexical Subsystem': 0,
      'Internal Models': 0,
      'Theta Oscillations': 0,
      'Sensory Disengagement': 0,
      'Head-Direction System': 0,
      'Emotional Processing': 0
    };

    const themes = {
      'Physical Activity': { count: 0, keywords: [], entries: [] },
      'Acoustic': { count: 0, keywords: [], entries: [] },
      'Visual': { count: 0, keywords: [], entries: [] },
      'Language': { count: 0, keywords: [], entries: [] },
      'Emotion': { count: 0, keywords: [], entries: [] },
      'Memory': { count: 0, keywords: [], entries: [] },
      'Focus': { count: 0, keywords: [], entries: [] },
      'Spatial Orientation': { count: 0, keywords: [], entries: [] }
    };

    entries.forEach(entry => {
      const content = (entry.situation + ' ' + entry.thoughts + ' ' + entry.emotions + ' ' + entry.physicalReactions + ' ' + entry.behaviors).toLowerCase();
      const tags = entry.tags.map(tag => tag.toLowerCase());

      // Analyze for subsystems
      if (content.includes('physical') || content.includes('motor')) {
        subsystems['Object Subsystem'] += 1;
        subsystems['Head-Direction System'] += 0.5;
      }
      if (content.includes('sound') || content.includes('hear')) {
        subsystems['Acoustic Subsystem'] += 1;
      }
      if (content.includes('see') || content.includes('visual')) {
        subsystems['Visual Subsystem'] += 1;
      }
      if (content.includes('word') || content.includes('speak')) {
        subsystems['Morphophonolexical Subsystem'] += 1;
      }
      if (content.includes('feel') || content.includes('emotion')) {
        subsystems['Emotional Processing'] += 1;
      }

      // Analyze for themes
      Object.keys(themes).forEach(theme => {
        if (tags.includes(theme.toLowerCase())) {
          themes[theme].count += 1;
          themes[theme].entries.push(entry.id);
        }
      });
    });

    return {
      subsystems: Object.entries(subsystems).map(([key, value]) => ({
        subsystem: key,
        value: value / entries.length * 10
      })),
      themes: Object.entries(themes).map(([key, value]) => ({
        theme: key,
        count: value.count,
        entries: value.entries
      }))
    };
  }
`

interface JournalEntry {
  id: string
  timestamp: string
  situation: string
  thoughts: string
  emotions: string
  physicalReactions: string
  behaviors: string
  tags: string[]
}

interface SubsystemAnalysis {
  subsystem: string
  value: number
}

interface ThemeAnalysis {
  theme: string
  count: number
  entries: string[]
}

export default function EnhancedCognitiveJournal() {
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([])
  const [currentEntry, setCurrentEntry] = useState<JournalEntry>({
    id: '',
    timestamp: new Date().toISOString(),
    situation: '',
    thoughts: '',
    emotions: '',
    physicalReactions: '',
    behaviors: '',
    tags: [],
  })
  const [subsystemAnalysis, setSubsystemAnalysis] = useState<SubsystemAnalysis[]>([])
  const [themeAnalysis, setThemeAnalysis] = useState<ThemeAnalysis[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [activeTab, setActiveTab] = useState<'journal' | 'analysis'>('journal')
  const [showSparkles, setShowSparkles] = useState(false)

  const cognitiveSystemTags = [
    'Physical Activity', 'Acoustic', 'Visual', 'Language',
    'Emotion', 'Memory', 'Focus', 'Spatial Orientation'
  ]

  // Load journal entries from localStorage on mount
  useEffect(() => {
    const savedEntries = localStorage.getItem('journalEntries')
    if (savedEntries) {
      setJournalEntries(JSON.parse(savedEntries))
    }
  }, [])

  // Save journal entries to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('journalEntries', JSON.stringify(journalEntries))
  }, [journalEntries])

  const addJournalEntry = () => {
    if (
      currentEntry.situation.trim() === '' ||
      currentEntry.thoughts.trim() === '' ||
      currentEntry.emotions.trim() === '' ||
      currentEntry.physicalReactions.trim() === '' ||
      currentEntry.behaviors.trim() === ''
    ) {
      alert('Please fill in all CBT components before adding an entry.')
      return
    }

    const newEntry = {
      ...currentEntry,
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
    }
    setJournalEntries([newEntry, ...journalEntries])
    setCurrentEntry({
      id: '',
      timestamp: new Date().toISOString(),
      situation: '',
      thoughts: '',
      emotions: '',
      physicalReactions: '',
      behaviors: '',
      tags: [],
    })
    setShowSparkles(true)
    setTimeout(() => setShowSparkles(false), 2000)
  }

  const addTag = (tag: string) => {
    if (!currentEntry.tags.includes(tag)) {
      setCurrentEntry({
        ...currentEntry,
        tags: [...currentEntry.tags, tag],
      })
    }
  }

  const removeTag = (tag: string) => {
    setCurrentEntry({
      ...currentEntry,
      tags: currentEntry.tags.filter((t) => t !== tag),
    })
  }

  const analyzeEntries = () => {
    setIsAnalyzing(true)
    const worker = new Worker(URL.createObjectURL(new Blob([workerScript], { type: 'application/javascript' })))

    worker.onmessage = function (e) {
      const { action, result } = e.data
      if (action === 'ANALYSIS_COMPLETE') {
        setSubsystemAnalysis(result.subsystems)
        setThemeAnalysis(result.themes)
        setIsAnalyzing(false)
        setActiveTab('analysis')
        worker.terminate()
      }
    }

    worker.postMessage({ action: 'ANALYZE_ENTRIES', data: journalEntries })
  }

  const chartData = {
    labels: subsystemAnalysis.map((item) => item.subsystem),
    datasets: [
      {
        label: 'Cognitive Subsystems Analysis',
        data: subsystemAnalysis.map((item) => item.value),
        backgroundColor: 'rgba(64, 224, 208, 0.2)',
        borderColor: 'rgba(64, 224, 208, 1)',
        borderWidth: 1,
      },
    ],
  }

  const chartOptions = {
    scales: {
      r: {
        angleLines: {
          display: false
        },
        suggestedMin: 0,
        suggestedMax: 10
      }
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#40E0D0] via-[#40E0D0]/80 to-[#FFD700] p-4">
      <div className="container mx-auto space-y-4">
        <div className="flex justify-between items-center">
          <h1 className="text-4xl font-bold text-white">Cognitive Journal</h1>
          <div className="relative">
            {showSparkles && (
              <div className="absolute -top-2 -right-2 animate-pulse">
                <Sparkles className="h-6 w-6 text-yellow-300" />
              </div>
            )}
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList className="bg-white/20 backdrop-blur-sm p-2 rounded-lg flex space-x-2">
            <TabsTrigger value="journal" className="text-white data-[state=active]:bg-white/30">
              Journal
            </TabsTrigger>
            <TabsTrigger value="analysis" className="text-white data-[state=active]:bg-white/30">
              Analysis
            </TabsTrigger>
          </TabsList>

          <TabsContent value="journal" className="space-y-4">
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">New Entry</CardTitle>
                <CardDescription className="text-white/80">
                  Document your thoughts and experiences using CBT components
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Situation */}
                <div>
                  <Label htmlFor="situation" className="text-white">Situation</Label>
                  <Textarea
                    id="situation"
                    value={currentEntry.situation}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, situation: e.target.value })}
                    placeholder="Describe the situation or event..."
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Thoughts */}
                <div>
                  <Label htmlFor="thoughts" className="text-white">Thoughts</Label>
                  <Textarea
                    id="thoughts"
                    value={currentEntry.thoughts}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, thoughts: e.target.value })}
                    placeholder="What thoughts went through your mind?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Emotions */}
                <div>
                  <Label htmlFor="emotions" className="text-white">Emotions</Label>
                  <Textarea
                    id="emotions"
                    value={currentEntry.emotions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, emotions: e.target.value })}
                    placeholder="What emotions did you feel?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Physical Reactions */}
                <div>
                  <Label htmlFor="physicalReactions" className="text-white">Physical Reactions</Label>
                  <Textarea
                    id="physicalReactions"
                    value={currentEntry.physicalReactions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, physicalReactions: e.target.value })}
                    placeholder="What physical sensations did you experience?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Behaviors */}
                <div>
                  <Label htmlFor="behaviors" className="text-white">Behaviors</Label>
                  <Textarea
                    id="behaviors"
                    value={currentEntry.behaviors}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, behaviors: e.target.value })}
                    placeholder="What actions did you take?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Tags */}
                <div>
                  <Label className="text-white">Cognitive System Tags</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {currentEntry.tags.map((tag) => (
                      <Button
                        key={tag}
                        variant="secondary"
                        size="sm"
                        onClick={() => removeTag(tag)}
                        className="bg-white/30 hover:bg-white/40 text-white"
                      >
                        {tag} <Tag className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                    {cognitiveSystemTags.map((tag) => (
                      <Button
                        key={tag}
                        variant="outline"
                        size="sm"
                        onClick={() => addTag(tag)}
                        className="bg-white/20 hover:bg-white/30 text-white border-white/30"
                      >
                        {tag} <Plus className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  onClick={addJournalEntry}
                  className="bg-white/20 hover:bg-white/30 text-white"
                >
                  Add Entry
                </Button>
              </CardFooter>
            </Card>

            {/* Journal Entries */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Journal Entries</CardTitle>
                <CardDescription className="text-white/80">
                  Your recent cognitive journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {journalEntries.length === 0 ? (
                  <p className="text-white">No entries yet. Start by adding a new entry above.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead>Date</TableHead>
                        <TableHead>Situation</TableHead>
                        <TableHead>Thoughts</TableHead>
                        <TableHead>Emotions</TableHead>
                        <TableHead>Tags</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {journalEntries.map((entry) => (
                        <TableRow key={entry.id}>
                          <TableCell>{new Date(entry.timestamp).toLocaleString()}</TableCell>
                          <TableCell>{entry.situation.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.thoughts.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.emotions.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.tags.join(', ')}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
              <CardFooter>
                <Button
                  onClick={analyzeEntries}
                  disabled={isAnalyzing || journalEntries.length === 0}
                  className="bg-white/20 hover:bg-white/30 text-white disabled:bg-white/10"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Analyzing
                    </>
                  ) : (
                    'Analyze Entries'
                  )}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4">
            {/* Subsystems Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Cognitive Subsystems Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Visualization of cognitive subsystems and related concepts
                </CardDescription>
              </CardHeader>
              <CardContent>
                {subsystemAnalysis.length === 0 ? (
                  <p className="text-white">No analysis data available.</p>
                ) : (
                  <div className="h-[500px] bg-white/5 rounded-lg p-4">
                    <Radar data={chartData} options={chartOptions} />
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Themes Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Theme Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Detailed breakdown of themes in your journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {themeAnalysis.length === 0 ? (
                  <p className="text-white">No theme data available.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead>Theme</TableHead>
                        <TableHead>Occurrence Count</TableHead>
                        <TableHead>Related Entries</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {themeAnalysis.map((theme) => (
                        <TableRow key={theme.theme}>
                          <TableCell>{theme.theme}</TableCell>
                          <TableCell>{theme.count}</TableCell>
                          <TableCell>{theme.entries.length} entries</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>

            {/* Back to Journal Button */}
            <div className="flex justify-center">
              <Button onClick={() => setActiveTab('journal')} className="bg-white/20 hover:bg-white/30 text-white">
                Back to Journal
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
```

### **5. Detailed Breakdown of Enhancements**

#### **a. CBT-Guided Journaling Tabs**

We use the `Tabs` component to separate the interface into **Journal** and **Analysis** sections. Within the **Journal** tab, users are guided through the five CBT components:

1. **Situation**: Describe the event or context.
2. **Thoughts**: Document the automatic thoughts associated with the situation.
3. **Emotions**: Identify the emotions felt.
4. **Physical Reactions**: Note any physical sensations or bodily responses.
5. **Behaviors**: Outline the actions taken in response to the situation and emotions.

This structured approach ensures comprehensive documentation of each entry, aligning with CBT's therapeutic techniques.

#### **b. Enhanced Tagging System**

Tags are aligned with CBT themes, allowing users to classify their entries effectively. Users can add or remove tags related to cognitive systems, facilitating easier analysis and categorization.

```javascript
const cognitiveSystemTags = [
  'Physical Activity', 'Acoustic', 'Visual', 'Language',
  'Emotion', 'Memory', 'Focus', 'Spatial Orientation'
]
```

These tags correspond to themes analyzed by the Web Worker, enabling meaningful insights.

#### **c. Web Worker for Background Analysis**

The Web Worker processes journal entries to analyze cognitive subsystems and themes without blocking the main UI thread. This separation ensures a smooth user experience even with extensive data.

**Worker Script**:

- **Subsystems**: Tracks various cognitive subsystems based on content and tags.
- **Themes**: Counts occurrences of predefined themes within entries.

The worker normalizes subsystem values to a scale of 0-10 for visualization purposes.

#### **d. Visualization with Chart.js**

A **Radar Chart** visualizes the cognitive subsystems analysis, providing a clear and interactive representation of the user's cognitive states.

**Chart Configuration**:

```javascript
const chartData = {
  labels: subsystemAnalysis.map((item) => item.subsystem),
  datasets: [
    {
      label: 'Cognitive Subsystems Analysis',
      data: subsystemAnalysis.map((item) => item.value),
      backgroundColor: 'rgba(64, 224, 208, 0.2)',
      borderColor: 'rgba(64, 224, 208, 1)',
      borderWidth: 1,
    },
  ],
}

const chartOptions = {
  scales: {
    r: {
      angleLines: {
        display: false
      },
      suggestedMin: 0,
      suggestedMax: 10
    }
  }
}
```

#### **e. Sparkles Animation**

A visual cue (sparkles) appears briefly when a new journal entry is added, providing positive feedback to the user.

```jsx
{showSparkles && (
  <div className="absolute -top-2 -right-2 animate-pulse">
    <Sparkles className="h-6 w-6 text-yellow-300" />
  </div>
)}
```

#### **f. Persistent Storage with LocalStorage**

Journal entries are saved to `localStorage`, ensuring data persistence across sessions.

```javascript
useEffect(() => {
  const savedEntries = localStorage.getItem('journalEntries')
  if (savedEntries) {
    setJournalEntries(JSON.parse(savedEntries))
  }
}, [])

useEffect(() => {
  localStorage.setItem('journalEntries', JSON.stringify(journalEntries))
}, [journalEntries])
```

### **6. Additional Recommendations**

#### **a. Validation and User Feedback**

Enhance the user experience by adding validation to ensure all CBT components are filled before allowing entry submission. Additionally, provide user-friendly feedback messages.

```javascript
const addJournalEntry = () => {
  if (
    currentEntry.situation.trim() === '' ||
    currentEntry.thoughts.trim() === '' ||
    currentEntry.emotions.trim() === '' ||
    currentEntry.physicalReactions.trim() === '' ||
    currentEntry.behaviors.trim() === ''
  ) {
    alert('Please fill in all CBT components before adding an entry.')
    return
  }

  // Proceed with adding the entry
}
```

#### **b. Editable Entries**

Allow users to edit or delete existing journal entries. This functionality can enhance the flexibility and usefulness of the journal.

```jsx
// Example: Adding Edit and Delete Buttons in the Journal Entries Table

<TableBody>
  {journalEntries.map((entry) => (
    <TableRow key={entry.id}>
      <TableCell>{new Date(entry.timestamp).toLocaleString()}</TableCell>
      <TableCell>{entry.situation.slice(0, 30)}...</TableCell>
      <TableCell>{entry.thoughts.slice(0, 30)}...</TableCell>
      <TableCell>{entry.emotions.slice(0, 30)}...</TableCell>
      <TableCell>{entry.tags.join(', ')}</TableCell>
      <TableCell>
        <Button onClick={() => editEntry(entry.id)} variant="ghost" size="sm">
          Edit
        </Button>
        <Button onClick={() => deleteEntry(entry.id)} variant="ghost" size="sm" className="text-red-500">
          Delete
        </Button>
      </TableCell>
    </TableRow>
  ))}
</TableBody>
```

Implement the `editEntry` and `deleteEntry` functions accordingly.

#### **c. Enhanced Visualization**

Consider adding more interactive or detailed visualizations, such as:

- **Bar Charts**: To compare theme occurrences.
- **Line Charts**: To track changes in cognitive subsystems over time.
- **Pie Charts**: For proportional distributions of themes or subsystems.

#### **d. User Authentication and Data Security**

If the journal contains sensitive information, implementing user authentication and securing data storage is crucial. Consider integrating authentication mechanisms and encrypting data if stored remotely.

### **7. Final Enhanced Code Snippet**

Here's the complete updated `EnhancedCognitiveJournal` component incorporating CBT-guided journaling, enhanced tagging, background analysis with Web Workers, and visualization.

```jsx
'use client'

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Brain, Activity, Eye, Ear, Tag, Plus, Sparkles } from 'lucide-react'
import { Textarea } from "@/components/ui/textarea"
import { Radar } from 'react-chartjs-2'
import { Chart, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js'

Chart.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend)

// Worker script as a string
const workerScript = `
  self.onmessage = function (e) {
    const { action, data } = e.data;
    switch (action) {
      case 'ANALYZE_ENTRIES':
        const result = analyzeEntries(data);
        self.postMessage({ action: 'ANALYSIS_COMPLETE', result });
        break;
      default:
        break;
    }
  };

  function analyzeEntries(entries) {
    const subsystems = {
      'Object Subsystem': 0,
      'Acoustic Subsystem': 0,
      'Visual Subsystem': 0,
      'Morphophonolexical Subsystem': 0,
      'Internal Models': 0,
      'Theta Oscillations': 0,
      'Sensory Disengagement': 0,
      'Head-Direction System': 0,
      'Emotional Processing': 0
    };

    const themes = {
      'Physical Activity': { count: 0, keywords: [], entries: [] },
      'Acoustic': { count: 0, keywords: [], entries: [] },
      'Visual': { count: 0, keywords: [], entries: [] },
      'Language': { count: 0, keywords: [], entries: [] },
      'Emotion': { count: 0, keywords: [], entries: [] },
      'Memory': { count: 0, keywords: [], entries: [] },
      'Focus': { count: 0, keywords: [], entries: [] },
      'Spatial Orientation': { count: 0, keywords: [], entries: [] }
    };

    entries.forEach(entry => {
      const content = (entry.situation + ' ' + entry.thoughts + ' ' + entry.emotions + ' ' + entry.physicalReactions + ' ' + entry.behaviors).toLowerCase();
      const tags = entry.tags.map(tag => tag.toLowerCase());

      // Analyze for subsystems
      if (content.includes('physical') || content.includes('motor')) {
        subsystems['Object Subsystem'] += 1;
        subsystems['Head-Direction System'] += 0.5;
      }
      if (content.includes('sound') || content.includes('hear')) {
        subsystems['Acoustic Subsystem'] += 1;
      }
      if (content.includes('see') || content.includes('visual')) {
        subsystems['Visual Subsystem'] += 1;
      }
      if (content.includes('word') || content.includes('speak')) {
        subsystems['Morphophonolexical Subsystem'] += 1;
      }
      if (content.includes('feel') || content.includes('emotion')) {
        subsystems['Emotional Processing'] += 1;
      }

      // Analyze for themes
      Object.keys(themes).forEach(theme => {
        if (tags.includes(theme.toLowerCase())) {
          themes[theme].count += 1;
          themes[theme].entries.push(entry.id);
        }
      });
    });

    return {
      subsystems: Object.entries(subsystems).map(([key, value]) => ({
        subsystem: key,
        value: value / entries.length * 10
      })),
      themes: Object.entries(themes).map(([key, value]) => ({
        theme: key,
        count: value.count,
        entries: value.entries
      }))
    };
  }
`

interface JournalEntry {
  id: string
  timestamp: string
  situation: string
  thoughts: string
  emotions: string
  physicalReactions: string
  behaviors: string
  tags: string[]
}

interface SubsystemAnalysis {
  subsystem: string
  value: number
}

interface ThemeAnalysis {
  theme: string
  count: number
  entries: string[]
}

export default function EnhancedCognitiveJournal() {
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([])
  const [currentEntry, setCurrentEntry] = useState<JournalEntry>({
    id: '',
    timestamp: new Date().toISOString(),
    situation: '',
    thoughts: '',
    emotions: '',
    physicalReactions: '',
    behaviors: '',
    tags: [],
  })
  const [subsystemAnalysis, setSubsystemAnalysis] = useState<SubsystemAnalysis[]>([])
  const [themeAnalysis, setThemeAnalysis] = useState<ThemeAnalysis[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [activeTab, setActiveTab] = useState<'journal' | 'analysis'>('journal')
  const [showSparkles, setShowSparkles] = useState(false)

  const cognitiveSystemTags = [
    'Physical Activity', 'Acoustic', 'Visual', 'Language',
    'Emotion', 'Memory', 'Focus', 'Spatial Orientation'
  ]

  // Load journal entries from localStorage on mount
  useEffect(() => {
    const savedEntries = localStorage.getItem('journalEntries')
    if (savedEntries) {
      setJournalEntries(JSON.parse(savedEntries))
    }
  }, [])

  // Save journal entries to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('journalEntries', JSON.stringify(journalEntries))
  }, [journalEntries])

  const addJournalEntry = () => {
    if (
      currentEntry.situation.trim() === '' ||
      currentEntry.thoughts.trim() === '' ||
      currentEntry.emotions.trim() === '' ||
      currentEntry.physicalReactions.trim() === '' ||
      currentEntry.behaviors.trim() === ''
    ) {
      alert('Please fill in all CBT components before adding an entry.')
      return
    }

    const newEntry = {
      ...currentEntry,
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
    }
    setJournalEntries([newEntry, ...journalEntries])
    setCurrentEntry({
      id: '',
      timestamp: new Date().toISOString(),
      situation: '',
      thoughts: '',
      emotions: '',
      physicalReactions: '',
      behaviors: '',
      tags: [],
    })
    setShowSparkles(true)
    setTimeout(() => setShowSparkles(false), 2000)
  }

  const addTag = (tag: string) => {
    if (!currentEntry.tags.includes(tag)) {
      setCurrentEntry({
        ...currentEntry,
        tags: [...currentEntry.tags, tag],
      })
    }
  }

  const removeTag = (tag: string) => {
    setCurrentEntry({
      ...currentEntry,
      tags: currentEntry.tags.filter((t) => t !== tag),
    })
  }

  const analyzeEntries = () => {
    setIsAnalyzing(true)
    const worker = new Worker(URL.createObjectURL(new Blob([workerScript], { type: 'application/javascript' })))

    worker.onmessage = function (e) {
      const { action, result } = e.data
      if (action === 'ANALYSIS_COMPLETE') {
        setSubsystemAnalysis(result.subsystems)
        setThemeAnalysis(result.themes)
        setIsAnalyzing(false)
        setActiveTab('analysis')
        worker.terminate()
      }
    }

    worker.postMessage({ action: 'ANALYZE_ENTRIES', data: journalEntries })
  }

  const chartData = {
    labels: subsystemAnalysis.map((item) => item.subsystem),
    datasets: [
      {
        label: 'Cognitive Subsystems Analysis',
        data: subsystemAnalysis.map((item) => item.value),
        backgroundColor: 'rgba(64, 224, 208, 0.2)',
        borderColor: 'rgba(64, 224, 208, 1)',
        borderWidth: 1,
      },
    ],
  }

  const chartOptions = {
    scales: {
      r: {
        angleLines: {
          display: false
        },
        suggestedMin: 0,
        suggestedMax: 10
      }
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#40E0D0] via-[#40E0D0]/80 to-[#FFD700] p-4">
      <div className="container mx-auto space-y-4">
        <div className="flex justify-between items-center">
          <h1 className="text-4xl font-bold text-white">Cognitive Journal</h1>
          <div className="relative">
            {showSparkles && (
              <div className="absolute -top-2 -right-2 animate-pulse">
                <Sparkles className="h-6 w-6 text-yellow-300" />
              </div>
            )}
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList className="bg-white/20 backdrop-blur-sm p-2 rounded-lg flex space-x-2">
            <TabsTrigger value="journal" className="text-white data-[state=active]:bg-white/30">
              Journal
            </TabsTrigger>
            <TabsTrigger value="analysis" className="text-white data-[state=active]:bg-white/30">
              Analysis
            </TabsTrigger>
          </TabsList>

          <TabsContent value="journal" className="space-y-4">
            {/* New Journal Entry Card */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">New Entry</CardTitle>
                <CardDescription className="text-white/80">
                  Document your thoughts and experiences using CBT components
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Situation */}
                <div>
                  <Label htmlFor="situation" className="text-white">Situation</Label>
                  <Textarea
                    id="situation"
                    value={currentEntry.situation}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, situation: e.target.value })}
                    placeholder="Describe the situation or event..."
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Thoughts */}
                <div>
                  <Label htmlFor="thoughts" className="text-white">Thoughts</Label>
                  <Textarea
                    id="thoughts"
                    value={currentEntry.thoughts}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, thoughts: e.target.value })}
                    placeholder="What thoughts went through your mind?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Emotions */}
                <div>
                  <Label htmlFor="emotions" className="text-white">Emotions</Label>
                  <Textarea
                    id="emotions"
                    value={currentEntry.emotions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, emotions: e.target.value })}
                    placeholder="What emotions did you feel?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Physical Reactions */}
                <div>
                  <Label htmlFor="physicalReactions" className="text-white">Physical Reactions</Label>
                  <Textarea
                    id="physicalReactions"
                    value={currentEntry.physicalReactions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, physicalReactions: e.target.value })}
                    placeholder="What physical sensations did you experience?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Behaviors */}
                <div>
                  <Label htmlFor="behaviors" className="text-white">Behaviors</Label>
                  <Textarea
                    id="behaviors"
                    value={currentEntry.behaviors}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, behaviors: e.target.value })}
                    placeholder="What actions did you take?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Tags */}
                <div>
                  <Label className="text-white">Cognitive System Tags</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {currentEntry.tags.map((tag) => (
                      <Button
                        key={tag}
                        variant="secondary"
                        size="sm"
                        onClick={() => removeTag(tag)}
                        className="bg-white/30 hover:bg-white/40 text-white"
                      >
                        {tag} <Tag className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                    {cognitiveSystemTags.map((tag) => (
                      <Button
                        key={tag}
                        variant="outline"
                        size="sm"
                        onClick={() => addTag(tag)}
                        className="bg-white/20 hover:bg-white/30 text-white border-white/30"
                      >
                        {tag} <Plus className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  onClick={addJournalEntry}
                  className="bg-white/20 hover:bg-white/30 text-white"
                >
                  Add Entry
                </Button>
              </CardFooter>
            </Card>

            {/* Journal Entries Table */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Journal Entries</CardTitle>
                <CardDescription className="text-white/80">
                  Your recent cognitive journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {journalEntries.length === 0 ? (
                  <p className="text-white">No entries yet. Start by adding a new entry above.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-white/80">Date</TableHead>
                        <TableHead className="text-white/80">Situation</TableHead>
                        <TableHead className="text-white/80">Thoughts</TableHead>
                        <TableHead className="text-white/80">Emotions</TableHead>
                        <TableHead className="text-white/80">Tags</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {journalEntries.map((entry) => (
                        <TableRow key={entry.id}>
                          <TableCell>{new Date(entry.timestamp).toLocaleString()}</TableCell>
                          <TableCell>{entry.situation.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.thoughts.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.emotions.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.tags.join(', ')}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
              <CardFooter>
                <Button
                  onClick={analyzeEntries}
                  disabled={isAnalyzing || journalEntries.length === 0}
                  className="bg-white/20 hover:bg-white/30 text-white disabled:bg-white/10"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Analyzing
                    </>
                  ) : (
                    'Analyze Entries'
                  )}
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4">
            {/* Subsystems Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Cognitive Subsystems Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Visualization of cognitive subsystems and related concepts
                </CardDescription>
              </CardHeader>
              <CardContent>
                {subsystemAnalysis.length === 0 ? (
                  <p className="text-white">No analysis data available.</p>
                ) : (
                  <div className="h-[500px] bg-white/5 rounded-lg p-4">
                    <Radar data={chartData} options={chartOptions} />
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Themes Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Theme Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Detailed breakdown of themes in your journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {themeAnalysis.length === 0 ? (
                  <p className="text-white">No theme data available.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-white/80">Theme</TableHead>
                        <TableHead className="text-white/80">Occurrence Count</TableHead>
                        <TableHead className="text-white/80">Related Entries</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {themeAnalysis.map((theme) => (
                        <TableRow key={theme.theme}>
                          <TableCell>{theme.theme}</TableCell>
                          <TableCell>{theme.count}</TableCell>
                          <TableCell>{theme.entries.length} entries</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>

            {/* Back to Journal Button */}
            <div className="flex justify-center">
              <Button onClick={() => setActiveTab('journal')} className="bg-white/20 hover:bg-white/30 text-white">
                Back to Journal
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
```

### **8. Explanation of Enhancements**

#### **a. CBT-Guided Journaling**

Each journal entry is now structured around the five CBT components:

1. **Situation**: The context or event triggering emotions.
2. **Thoughts**: Automatic thoughts arising from the situation.
3. **Emotions**: Feelings experienced.
4. **Physical Reactions**: Bodily sensations or autonomic responses.
5. **Behaviors**: Actions taken in response to the situation and emotions.

This structure ensures comprehensive documentation, aligning with CBT's therapeutic goals.

#### **b. Tagging Aligned with CBT Themes**

Tags correspond to cognitive system themes, enabling detailed analysis. Users can add multiple tags to each entry, facilitating categorized insights.

#### **c. Sparkles Animation for Positive Feedback**

A brief sparkles animation appears when a new journal entry is added, providing positive reinforcement.

```jsx
{showSparkles && (
  <div className="absolute -top-2 -right-2 animate-pulse">
    <Sparkles className="h-6 w-6 text-yellow-300" />
  </div>
)}
```

#### **d. Web Worker for Efficient Analysis**

The Web Worker processes journal entries to analyze cognitive subsystems and themes, returning structured data for visualization.

- **Subsystems**: Reflect various cognitive functions.
- **Themes**: Highlight recurring topics or areas of focus.

#### **e. Visualization with Radar Chart**

The Radar chart visualizes the normalized values of cognitive subsystems, providing an intuitive understanding of cognitive states.

```javascript
const chartData = {
  labels: subsystemAnalysis.map((item) => item.subsystem),
  datasets: [
    {
      label: 'Cognitive Subsystems Analysis',
      data: subsystemAnalysis.map((item) => item.value),
      backgroundColor: 'rgba(64, 224, 208, 0.2)',
      borderColor: 'rgba(64, 224, 208, 1)',
      borderWidth: 1,
    },
  ],
}
```

#### **f. Themes Analysis Table**

A table displays the frequency and related entries of each theme, allowing users to identify patterns or areas needing attention.

```jsx
<TableBody>
  {themeAnalysis.map((theme) => (
    <TableRow key={theme.theme}>
      <TableCell>{theme.theme}</TableCell>
      <TableCell>{theme.count}</TableCell>
      <TableCell>{theme.entries.length} entries</TableCell>
    </TableRow>
  ))}
</TableBody>
```

### **9. User Experience Enhancements**

#### **a. Validation and Alerts**

Before adding an entry, the form checks that all CBT components are filled, preventing incomplete documentation.

```javascript
if (
  currentEntry.situation.trim() === '' ||
  currentEntry.thoughts.trim() === '' ||
  currentEntry.emotions.trim() === '' ||
  currentEntry.physicalReactions.trim() === '' ||
  currentEntry.behaviors.trim() === ''
) {
  alert('Please fill in all CBT components before adding an entry.')
  return
}
```

#### **b. Responsive Design**

Ensure the component is responsive across different devices. Utilize Tailwind CSS's responsive utilities to adjust layouts for mobile, tablet, and desktop screens.

#### **c. Accessibility**

Add appropriate ARIA labels and ensure all interactive elements are accessible via keyboard navigation.

```jsx
<Button
  onClick={addJournalEntry}
  className="bg-white/20 hover:bg-white/30 text-white"
  aria-label="Add Journal Entry"
>
  Add Entry
</Button>
```

### **10. Potential Further Enhancements**

#### **a. Editable and Deletable Entries**

Allow users to edit or delete existing journal entries for better flexibility.

```jsx
// Example: Adding Edit and Delete Buttons in the Journal Entries Table

<TableBody>
  {journalEntries.map((entry) => (
    <TableRow key={entry.id}>
      <TableCell>{new Date(entry.timestamp).toLocaleString()}</TableCell>
      <TableCell>{entry.situation.slice(0, 30)}...</TableCell>
      <TableCell>{entry.thoughts.slice(0, 30)}...</TableCell>
      <TableCell>{entry.emotions.slice(0, 30)}...</TableCell>
      <TableCell>{entry.tags.join(', ')}</TableCell>
      <TableCell>
        <Button onClick={() => editEntry(entry.id)} variant="ghost" size="sm">
          Edit
        </Button>
        <Button onClick={() => deleteEntry(entry.id)} variant="ghost" size="sm" className="text-red-500">
          Delete
        </Button>
      </TableCell>
    </TableRow>
  ))}
</TableBody>
```

Implement the `editEntry` and `deleteEntry` functions accordingly.

#### **b. Enhanced Analytics**

Incorporate more detailed analytics, such as:

- **Time Series Analysis**: Track changes in cognitive subsystems over time.
- **Correlation Analysis**: Identify correlations between different cognitive subsystems and themes.

#### **c. Export and Share Features**

Allow users to export their journal data in various formats (e.g., PDF, CSV) or share summaries with therapists.

```jsx
const handleExportJson = () => {
  const dataStr = JSON.stringify(journalEntries, null, 2)
  const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)
  const linkElement = document.createElement('a')
  linkElement.setAttribute('href', dataUri)
  linkElement.setAttribute('download', 'cognitive-journal.json')
  linkElement.click()
}

// Add an Export Button
<Button onClick={handleExportJson} className="bg-purple-500 text-white hover:bg-purple-600">
  <Download className="mr-2 h-4 w-4" /> Export Journal
</Button>
```

### **11. Final Thoughts**

By integrating CBT principles into your `EnhancedCognitiveJournal` component, you provide users with a structured and therapeutic tool for self-reflection and emotional management. The combination of guided journaling, tagging, background analysis, and visualization fosters a comprehensive understanding of their cognitive and emotional states.

### **Complete Enhanced Code Snippet**

Here's the final enhanced version of your `EnhancedCognitiveJournal` component incorporating all the discussed features:

```jsx
'use client'

import React, { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Brain, Activity, Eye, Ear, Tag, Plus, Sparkles, Download } from 'lucide-react'
import { Textarea } from "@/components/ui/textarea"
import { Radar } from 'react-chartjs-2'
import { Chart, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js'

Chart.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend)

// Worker script as a string
const workerScript = `
  self.onmessage = function (e) {
    const { action, data } = e.data;
    switch (action) {
      case 'ANALYZE_ENTRIES':
        const result = analyzeEntries(data);
        self.postMessage({ action: 'ANALYSIS_COMPLETE', result });
        break;
      default:
        break;
    }
  };

  function analyzeEntries(entries) {
    const subsystems = {
      'Object Subsystem': 0,
      'Acoustic Subsystem': 0,
      'Visual Subsystem': 0,
      'Morphophonolexical Subsystem': 0,
      'Internal Models': 0,
      'Theta Oscillations': 0,
      'Sensory Disengagement': 0,
      'Head-Direction System': 0,
      'Emotional Processing': 0
    };

    const themes = {
      'Physical Activity': { count: 0, keywords: [], entries: [] },
      'Acoustic': { count: 0, keywords: [], entries: [] },
      'Visual': { count: 0, keywords: [], entries: [] },
      'Language': { count: 0, keywords: [], entries: [] },
      'Emotion': { count: 0, keywords: [], entries: [] },
      'Memory': { count: 0, keywords: [], entries: [] },
      'Focus': { count: 0, keywords: [], entries: [] },
      'Spatial Orientation': { count: 0, keywords: [], entries: [] }
    };

    entries.forEach(entry => {
      const content = (entry.situation + ' ' + entry.thoughts + ' ' + entry.emotions + ' ' + entry.physicalReactions + ' ' + entry.behaviors).toLowerCase();
      const tags = entry.tags.map(tag => tag.toLowerCase());

      // Analyze for subsystems
      if (content.includes('physical') || content.includes('motor')) {
        subsystems['Object Subsystem'] += 1;
        subsystems['Head-Direction System'] += 0.5;
      }
      if (content.includes('sound') || content.includes('hear')) {
        subsystems['Acoustic Subsystem'] += 1;
      }
      if (content.includes('see') || content.includes('visual')) {
        subsystems['Visual Subsystem'] += 1;
      }
      if (content.includes('word') || content.includes('speak')) {
        subsystems['Morphophonolexical Subsystem'] += 1;
      }
      if (content.includes('feel') || content.includes('emotion')) {
        subsystems['Emotional Processing'] += 1;
      }

      // Analyze for themes
      Object.keys(themes).forEach(theme => {
        if (tags.includes(theme.toLowerCase())) {
          themes[theme].count += 1;
          themes[theme].entries.push(entry.id);
        }
      });
    });

    return {
      subsystems: Object.entries(subsystems).map(([key, value]) => ({
        subsystem: key,
        value: value / entries.length * 10
      })),
      themes: Object.entries(themes).map(([key, value]) => ({
        theme: key,
        count: value.count,
        entries: value.entries
      }))
    };
  }
`

interface JournalEntry {
  id: string
  timestamp: string
  situation: string
  thoughts: string
  emotions: string
  physicalReactions: string
  behaviors: string
  tags: string[]
}

interface SubsystemAnalysis {
  subsystem: string
  value: number
}

interface ThemeAnalysis {
  theme: string
  count: number
  entries: string[]
}

export default function EnhancedCognitiveJournal() {
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([])
  const [currentEntry, setCurrentEntry] = useState<JournalEntry>({
    id: '',
    timestamp: new Date().toISOString(),
    situation: '',
    thoughts: '',
    emotions: '',
    physicalReactions: '',
    behaviors: '',
    tags: [],
  })
  const [subsystemAnalysis, setSubsystemAnalysis] = useState<SubsystemAnalysis[]>([])
  const [themeAnalysis, setThemeAnalysis] = useState<ThemeAnalysis[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [activeTab, setActiveTab] = useState<'journal' | 'analysis'>('journal')
  const [showSparkles, setShowSparkles] = useState(false)

  const cognitiveSystemTags = [
    'Physical Activity', 'Acoustic', 'Visual', 'Language',
    'Emotion', 'Memory', 'Focus', 'Spatial Orientation'
  ]

  // Load journal entries from localStorage on mount
  useEffect(() => {
    const savedEntries = localStorage.getItem('journalEntries')
    if (savedEntries) {
      setJournalEntries(JSON.parse(savedEntries))
    }
  }, [])

  // Save journal entries to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('journalEntries', JSON.stringify(journalEntries))
  }, [journalEntries])

  const addJournalEntry = () => {
    if (
      currentEntry.situation.trim() === '' ||
      currentEntry.thoughts.trim() === '' ||
      currentEntry.emotions.trim() === '' ||
      currentEntry.physicalReactions.trim() === '' ||
      currentEntry.behaviors.trim() === ''
    ) {
      alert('Please fill in all CBT components before adding an entry.')
      return
    }

    const newEntry = {
      ...currentEntry,
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
    }
    setJournalEntries([newEntry, ...journalEntries])
    setCurrentEntry({
      id: '',
      timestamp: new Date().toISOString(),
      situation: '',
      thoughts: '',
      emotions: '',
      physicalReactions: '',
      behaviors: '',
      tags: [],
    })
    setShowSparkles(true)
    setTimeout(() => setShowSparkles(false), 2000)
  }

  const addTag = (tag: string) => {
    if (!currentEntry.tags.includes(tag)) {
      setCurrentEntry({
        ...currentEntry,
        tags: [...currentEntry.tags, tag],
      })
    }
  }

  const removeTag = (tag: string) => {
    setCurrentEntry({
      ...currentEntry,
      tags: currentEntry.tags.filter((t) => t !== tag),
    })
  }

  const analyzeEntries = () => {
    setIsAnalyzing(true)
    const worker = new Worker(URL.createObjectURL(new Blob([workerScript], { type: 'application/javascript' })))

    worker.onmessage = function (e) {
      const { action, result } = e.data
      if (action === 'ANALYSIS_COMPLETE') {
        setSubsystemAnalysis(result.subsystems)
        setThemeAnalysis(result.themes)
        setIsAnalyzing(false)
        setActiveTab('analysis')
        worker.terminate()
      }
    }

    worker.postMessage({ action: 'ANALYZE_ENTRIES', data: journalEntries })
  }

  const chartData = {
    labels: subsystemAnalysis.map((item) => item.subsystem),
    datasets: [
      {
        label: 'Cognitive Subsystems Analysis',
        data: subsystemAnalysis.map((item) => item.value),
        backgroundColor: 'rgba(64, 224, 208, 0.2)',
        borderColor: 'rgba(64, 224, 208, 1)',
        borderWidth: 1,
      },
    ],
  }

  const chartOptions = {
    scales: {
      r: {
        angleLines: {
          display: false
        },
        suggestedMin: 0,
        suggestedMax: 10
      }
    }
  }

  const handleExportJson = () => {
    const dataStr = JSON.stringify(journalEntries, null, 2)
    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)
    const linkElement = document.createElement('a')
    linkElement.setAttribute('href', dataUri)
    linkElement.setAttribute('download', 'cognitive-journal.json')
    linkElement.click()
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#40E0D0] via-[#40E0D0]/80 to-[#FFD700] p-4">
      <div className="container mx-auto space-y-4">
        <div className="flex justify-between items-center">
          <h1 className="text-4xl font-bold text-white">Cognitive Journal</h1>
          <div className="relative">
            {showSparkles && (
              <div className="absolute -top-2 -right-2 animate-pulse">
                <Sparkles className="h-6 w-6 text-yellow-300" />
              </div>
            )}
          </div>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList className="bg-white/20 backdrop-blur-sm p-2 rounded-lg flex space-x-2">
            <TabsTrigger value="journal" className="text-white data-[state=active]:bg-white/30">
              Journal
            </TabsTrigger>
            <TabsTrigger value="analysis" className="text-white data-[state=active]:bg-white/30">
              Analysis
            </TabsTrigger>
          </TabsList>

          <TabsContent value="journal" className="space-y-4">
            {/* New Journal Entry Card */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">New Entry</CardTitle>
                <CardDescription className="text-white/80">
                  Document your thoughts and experiences using CBT components
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Situation */}
                <div>
                  <Label htmlFor="situation" className="text-white">Situation</Label>
                  <Textarea
                    id="situation"
                    value={currentEntry.situation}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, situation: e.target.value })}
                    placeholder="Describe the situation or event..."
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Thoughts */}
                <div>
                  <Label htmlFor="thoughts" className="text-white">Thoughts</Label>
                  <Textarea
                    id="thoughts"
                    value={currentEntry.thoughts}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, thoughts: e.target.value })}
                    placeholder="What thoughts went through your mind?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Emotions */}
                <div>
                  <Label htmlFor="emotions" className="text-white">Emotions</Label>
                  <Textarea
                    id="emotions"
                    value={currentEntry.emotions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, emotions: e.target.value })}
                    placeholder="What emotions did you feel?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Physical Reactions */}
                <div>
                  <Label htmlFor="physicalReactions" className="text-white">Physical Reactions</Label>
                  <Textarea
                    id="physicalReactions"
                    value={currentEntry.physicalReactions}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, physicalReactions: e.target.value })}
                    placeholder="What physical sensations did you experience?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Behaviors */}
                <div>
                  <Label htmlFor="behaviors" className="text-white">Behaviors</Label>
                  <Textarea
                    id="behaviors"
                    value={currentEntry.behaviors}
                    onChange={(e) => setCurrentEntry({ ...currentEntry, behaviors: e.target.value })}
                    placeholder="What actions did you take?"
                    className="h-24 bg-white/20 backdrop-blur-sm border-none placeholder:text-white/50 text-white"
                  />
                </div>

                {/* Tags */}
                <div>
                  <Label className="text-white">Cognitive System Tags</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {currentEntry.tags.map((tag) => (
                      <Button
                        key={tag}
                        variant="secondary"
                        size="sm"
                        onClick={() => removeTag(tag)}
                        className="bg-white/30 hover:bg-white/40 text-white"
                      >
                        {tag} <Tag className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                    {cognitiveSystemTags.map((tag) => (
                      <Button
                        key={tag}
                        variant="outline"
                        size="sm"
                        onClick={() => addTag(tag)}
                        className="bg-white/20 hover:bg-white/30 text-white border-white/30"
                      >
                        {tag} <Plus className="ml-1 h-4 w-4" />
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  onClick={addJournalEntry}
                  className="bg-white/20 hover:bg-white/30 text-white"
                >
                  Add Entry
                </Button>
              </CardFooter>
            </Card>

            {/* Journal Entries Table */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Journal Entries</CardTitle>
                <CardDescription className="text-white/80">
                  Your recent cognitive journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {journalEntries.length === 0 ? (
                  <p className="text-white">No entries yet. Start by adding a new entry above.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-white/80">Date</TableHead>
                        <TableHead className="text-white/80">Situation</TableHead>
                        <TableHead className="text-white/80">Thoughts</TableHead>
                        <TableHead className="text-white/80">Emotions</TableHead>
                        <TableHead className="text-white/80">Tags</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {journalEntries.map((entry) => (
                        <TableRow key={entry.id}>
                          <TableCell>{new Date(entry.timestamp).toLocaleString()}</TableCell>
                          <TableCell>{entry.situation.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.thoughts.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.emotions.slice(0, 30)}...</TableCell>
                          <TableCell>{entry.tags.join(', ')}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
              <CardFooter>
                <Button
                  onClick={analyzeEntries}
                  disabled={isAnalyzing || journalEntries.length === 0}
                  className="bg-white/20 hover:bg-white/30 text-white disabled:bg-white/10"
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Analyzing
                    </>
                  ) : (
                    'Analyze Entries'
                  )}
                </Button>
                <Button
                  onClick={handleExportJson}
                  className="ml-4 bg-purple-500 hover:bg-purple-600 text-white"
                >
                  <Download className="mr-2 h-4 w-4" /> Export Journal
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4">
            {/* Subsystems Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Cognitive Subsystems Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Visualization of cognitive subsystems and related concepts
                </CardDescription>
              </CardHeader>
              <CardContent>
                {subsystemAnalysis.length === 0 ? (
                  <p className="text-white">No analysis data available.</p>
                ) : (
                  <div className="h-[500px] bg-white/5 rounded-lg p-4">
                    <Radar data={chartData} options={chartOptions} />
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Themes Analysis */}
            <Card className="backdrop-blur-md bg-white/10 border-none">
              <CardHeader>
                <CardTitle className="text-white">Theme Analysis</CardTitle>
                <CardDescription className="text-white/80">
                  Detailed breakdown of themes in your journal entries
                </CardDescription>
              </CardHeader>
              <CardContent>
                {themeAnalysis.length === 0 ? (
                  <p className="text-white">No theme data available.</p>
                ) : (
                  <Table className="text-white">
                    <TableHeader>
                      <TableRow>
                        <TableHead className="text-white/80">Theme</TableHead>
                        <TableHead className="text-white/80">Occurrence Count</TableHead>
                        <TableHead className="text-white/80">Related Entries</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {themeAnalysis.map((theme) => (
                        <TableRow key={theme.theme}>
                          <TableCell>{theme.theme}</TableCell>
                          <TableCell>{theme.count}</TableCell>
                          <TableCell>{theme.entries.length} entries</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>

            {/* Back to Journal Button */}
            <div className="flex justify-center">
              <Button onClick={() => setActiveTab('journal')} className="bg-white/20 hover:bg-white/30 text-white">
                Back to Journal
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
```

### **12. Key Features Implemented**

1. **CBT-Guided Journaling**:
   - **Situation, Thoughts, Emotions, Physical Reactions, Behaviors**: Separate sections guiding users to document each aspect.
   
2. **Tagging Aligned with CBT Themes**:
   - Users can tag entries with predefined CBT themes for detailed analysis.

3. **Web Worker for Background Analysis**:
   - Processes entries to analyze cognitive subsystems and themes without blocking the UI.

4. **Visualization with Radar Chart**:
   - Displays the analysis of cognitive subsystems, normalized on a 0-10 scale.

5. **Themes Analysis Table**:
   - Lists themes with occurrence counts and related journal entries.

6. **Export Feature**:
   - Allows users to export their journal entries as a JSON file for sharing with therapists.

7. **Sparkles Animation**:
   - Provides positive feedback when a new journal entry is added.

8. **Persistent Storage**:
   - Journal entries are saved to `localStorage`, ensuring data persists across sessions.

### **13. Final Recommendations**

- **Enhance Data Security**: If deploying this application publicly, consider securing data storage and implementing user authentication to protect sensitive information.
  
- **Advanced Analytics**: Incorporate more sophisticated natural language processing (NLP) techniques within the Web Worker to provide deeper insights.
  
- **Mobile Responsiveness**: Ensure the UI is fully responsive and optimized for mobile devices to provide a seamless experience across platforms.
  
- **User Guidance**: Add tooltips or informational icons to guide users through the journaling process, explaining each CBT component's purpose.

- **Feedback Mechanism**: Implement a feedback system where users can receive automated or professional feedback based on their entries and analysis.

### **14. Conclusion**

By integrating CBT principles into your `EnhancedCognitiveJournal`, you provide users with a structured and therapeutic tool for self-reflection and emotional management. The combination of guided journaling, tagging, background analysis, and visualization fosters a comprehensive understanding of their cognitive and emotional states, aligning with therapeutic goals.

If you have any further questions or need additional features implemented, feel free to ask!

